# -*- coding: utf-8 -*-
"""Major_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/RamyaP99/Handwritten-Digits-Classification/blob/main/Major_Project.ipynb
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""### Loading the data"""

df = pd.read_csv("digit_svm.csv")
df

df.shape

df.info()

df.describe()

"""Ploting some samples"""

four = df.iloc[3,1:]
four.shape
four = four.values.reshape(28,28)
plt.imshow(four,cmap="gray")

"""Visualizing the number of counts of digits"""

df.label.value_counts()

sns.countplot(x="label",data=df)
plt.show()

df.isnull().sum()

"""### Separating the data into input and output"""

x = df.iloc[:,1:].values
y = df.iloc[:,0].values

"""### Training and Testing the data"""

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=0)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()

x_train = sc.fit_transform(x_train)
x_test = sc.fit_transform(x_test)

print(x_train.shape)
print(y_train.shape)
print(x_test.shape)
print(y_test.shape)

"""### Lets build two models - Linear and Non linear

## Linear Model
"""

from sklearn.svm import SVC

linear_clf = SVC(kernel="linear",random_state=0)

linear_clf.fit(x_train , y_train)

pred_y = linear_clf.predict(x_test)

pred_y

from sklearn.metrics import confusion_matrix, accuracy_score

confusion_matrix(y_test,pred_y)

accuracy_score(y_test,pred_y)

"""Linear model gives approx. 92% accuracy

## Non Linear Model
"""

rbf_clf = SVC(kernel="rbf",random_state=0)

rbf_clf.fit(x_train , y_train)

pred_y1 = rbf_clf.predict(x_test)

pred_y1

confusion_matrix(y_test,pred_y1)

accuracy_score(y_test,pred_y1)

"""Non linear model gives approx. 96% accuracy

The accuracy achieved using non linear kernel(rbf) is much higher than that of a linear kernel
"""

